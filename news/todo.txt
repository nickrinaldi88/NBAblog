5/28/21

pre 1. Finish Tech with Tim tutorial
-Figure out current error: our path pages Login.js and CreateUser.js are presenting blank pages when the 'exact' is added to the path in homepage.js
-Once this is figured out, you can move on.


-How our program should work:
    -User sends GET request to database to fetch posts which will appear on page. 
    -We store that data, being updated constantly. We're sending get requests to twitter and reddit, but
        it's different from the user sending a get request to us. 
    -Send GET Request to Twitter and Reddit to fetch data.
    -Store data in database
    -Send POST request of Data to front end

-REMINDER
    -views.py may have some error, because we're following Tim's tutorial and its a different project than ours. We just need a user to scroll our page, we're putting the posts on their screen. They don't need to host anything. Just keep this in mind if errors show up. 

1. Add scrolling-to-update functionality
2. Combine Reddit and Twitter news into one timeline
2. Add login/user functionality
2a. add ability to save posts
3. Random Stats bar (request, bball ref, etc.)
3a. Search Bar 
3b. Ticker at top of the page for betting odds
4. Add more misc features
5. Make the page pretty
6. Handle server errors



-- ON HOLD

MISC Stuff

////////////////////////////////////////


-Django Newsfeed Stuff
    -https://stackoverflow.com/questions/2128886/django-way-for-building-a-news-feed-status-update-activity-stream
    -Also, Google.
-Look at stream library 


    -Add other functionality later on  
        -Log in?
        -Statistical connection?
        -Forum?

When we have users https://django-activity-stream.readthedocs.io/en/latest/


4/23/21


//////////////////



Endgame work:

-Handle exception cases if server goes down for both api's
-Secure the API keys
    -https://simpleisbetterthancomplex.com/tips/2016/11/01/django-tip-19-protecting-sensitive-information.html




'''OVERHAUL'''
-May collect HTML data through Models, have like Modelfields be url: site.url, etc.
    -Model fields correspond to reponse objects
    -Store that data. Then fetch from Database. 
    
-So we'll have to fetch from database and place in our view. 